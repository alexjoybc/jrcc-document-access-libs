try {
   timeout(time: 20, unit: 'MINUTES') {

     node {
       stage("Initialize") {
         project = env.BUILD
       }
     }

     node('maven') {

         environment {
             // This can be nexus3 or nexus2
             NEXUS_VERSION = "nexus3"
             // This can be http or https
             NEXUS_PROTOCOL = "http"
             // Where your Nexus is running
             NEXUS_URL = "http://nexus-9wbi3f-tools.pathfinder.gov.bc.ca/"
             // Repository where we will upload snapshots
             NEXUS_SNAPSHOT_REPOSITORY = "jrcc-snapshots"
             // Repository where we will upload releases
             NEXUS_RELEASE_REPOSITORY = "jrcc-releases"
             // Jenkins credential id to authenticate to Nexus OSS
             NEXUS_CREDENTIAL_ID = "nexus-credentials"
         }

        stage("Checkout") {
          git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
        }

        stage("Build WAR") {
          sh "mvn clean package -Psample-app -Dmaven.test.skip=true"
          sh "ls"

          //stash name:"jars", includes:"target/*.jar"
        }

        stage('Push to Nexus'){
            // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
            pom = readMavenPom file: "pom.xml";
            sh "ls"
            // Find built artifact under target folder
            filesByGlob = findFiles(glob: "*.${pom.packaging}");
            echo ${pom.packaging};
            // Print some info from the artifact found
            echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
            // Extract the path from the File found
            artifactPath = filesByGlob[0].path;
            // Assign to a boolean response verifying If the artifact name exists
            artifactExists = fileExists artifactPath;
            if(artifactExists) {
                echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                nexusArtifactUploader(
                    nexusVersion: NEXUS_VERSION,
                    protocol: NEXUS_PROTOCOL,
                    nexusUrl: NEXUS_URL,
                    groupId: pom.groupId,
                    version: pom.version,
                    repository: NEXUS_SNAPSHOT_REPOSITORY,
                    credentialsId: NEXUS_CREDENTIAL_ID,
                    artifacts: [
                        // Artifact generated such as .jar, .ear and .war files.
                        [artifactId: pom.artifactId,
                        classifier: '',
                        file: artifactPath,
                        type: pom.packaging],
                        // Lets upload the pom.xml file for additional information for Transitive dependencies
                        [artifactId: pom.artifactId,
                        classifier: '',
                        file: "pom.xml",
                        type: "pom"]
                    ]
                );
            } else {
                error "*** File: ${artifactPath}, could not be found";
            }
        }


        // BUILD VERIFICATION STAGE
        stage ('Verify Build') {
            openshiftVerifyBuild(bldCfg: env.APP_NAME, namespace: env.BUILD)
        }

        // FUNCTIONAL TESTING
        //   stage('Functional Tests') {
        //     openshift.withCluster() {
        //       openshift.withProject() {
        //       }
        //     }
        //   }

        // END TO END TESTING
        //   stage('End to End Tests') {
        //     openshift.withCluster() {
        //       openshift.withProject() {
        //       }
        //     }
        //   }

        // ARTIFACT SCAN
        //   stage('Scan Artifacts') {
        //     openshift.withCluster() {
        //       openshift.withProject() {
        //       }
        //     }
        //   }

        // ARCHIVE ARTIFACTS
        //   stage('Archive Artifacts') {
        //     openshift.withCluster() {
        //       openshift.withProject() {
        //       }
        //     }
        //   }

        // PROMOTE TO DEV
        stage('Promote from Build to Dev') {
          openshift.withCluster() {
            openshift.withProject() {
              openshiftDeploy(deploymentConfig: env.APP_NAME, namespace: env.DEV)
            }
          }
        }

        // VERIFY DEV PROMOTION
        stage ('Verify Deployment to Dev') {
            openshiftVerifyDeployment(deploymentConfig: env.APP_NAME, namespace: env.DEV)
        }

        // MANUAL CHECK FOR PROMOTION TO TEST
        stage('Promotion gate') {
            script {
              input message: 'Promote application to Test?'
            }
        }

        // PROMOTE FROM DEV TO TEST
        stage('Promote from Dev to Test') {
            openshift.withCluster() {
              openshift.withProject() {
                openshiftDeploy(deploymentConfig: env.APP_NAME, namespace: env.TEST)
              }
            }
        }

        // VERIFY DEPLOYMENT TO TEST
        stage ('Verify Deployment to Test') {
            openshiftVerifyDeployment(deploymentConfig: env.APP_NAME, namespace: env.TEST)
        }

        // MANUAL CHECK FOR PROMOTION TO PRODUCTION
        stage('Promotion gate') {
            script {
              input message: 'Promote application to Production?'
            }
        }

        // PROMOTE TO PRODUCTION
        stage('Promote from Stage to Prod') {
            openshift.withCluster() {
              openshift.withProject() {
                openshiftDeploy(deploymentConfig: env.APP_NAME, namespace: env.PROD)
              }
            }
        }

        // MANUAL CHECK FOR PROMOTION TO PRODUCTION
        stage ('Verify Deployment to Prod') {
            openshiftVerifyDeployment(deploymentConfig: env.APP_NAME, namespace: env.PROD)
        }
      }
   }
} catch (err) {
   echo "in catch block"
   echo "Caught: ${err}"
   currentBuild.result = 'FAILURE'
   throw err
}
