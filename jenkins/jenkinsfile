try {
   timeout(time: 20, unit: 'MINUTES') {

     node {
       stage("Initialize") {
         project = env.BUILD
       }
     }

     node('maven') {

         environment {
             // This can be nexus3 or nexus2
             NEXUS_VERSION = "nexus3"
             // This can be http or https
             NEXUS_PROTOCOL = "http"
             // Where your Nexus is running
             NEXUS_URL = "http://nexus-9wbi3f-tools.pathfinder.gov.bc.ca/"
             // Repository where we will upload snapshots
             NEXUS_SNAPSHOT_REPOSITORY = "jrcc-snapshots"
             // Repository where we will upload releases
             NEXUS_RELEASE_REPOSITORY = "jrcc-releases"
             // Jenkins credential id to authenticate to Nexus OSS
             NEXUS_CREDENTIAL_ID = "nexus-credentials"
         }

        stage("Checkout") {
          git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
        }

        stage("Build JARs") {
          sh "mvn clean package -Dmaven.test.skip=true"
          sh "ls"

          //stash name:"jars", includes:"target/*.jar"
        }

        stage('Push to Nexus'){
            // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
            pom = readMavenPom file: "pom.xml";
            // Find built artifact under target folder
            filesByGlob = findFiles(glob: "/tmp/src/**/target/*.jar");

            echo "Found ${filesByGlob.length} files"
            for(file in filesByGlob){
                echo "${file.name} ${file.path} ${file.directory} ${file.length} ${file.lastModified}"
            }
            // Print some info from the artifact found
            filesByGlob.each {
                echo "${it.name} ${it.path} ${it.directory} ${it.length} ${it.lastModified}"
                // Extract the path from the File found
                artifactPath = it.path;
                // Assign to a boolean response verifying If the artifact name exists
                artifactExists = fileExists artifactPath;
                if(artifactExists) {
                    echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                    nexusArtifactUploader(
                        nexusVersion: NEXUS_VERSION,
                        protocol: NEXUS_PROTOCOL,
                        nexusUrl: NEXUS_URL,
                        groupId: pom.groupId,
                        version: pom.version,
                        repository: NEXUS_SNAPSHOT_REPOSITORY,
                        credentialsId: NEXUS_CREDENTIAL_ID,
                        artifacts: [
                            // Artifact generated such as .jar, .ear and .war files.
                            [artifactId: pom.artifactId,
                            classifier: '',
                            file: artifactPath,
                            type: 'jar'],
                            // Lets upload the pom.xml file for additional information for Transitive dependencies
                            [artifactId: pom.artifactId,
                            classifier: '',
                            file: "pom.xml",
                            type: "pom"]
                        ]
                    );
                } else {
                    error "*** File: ${artifactPath}, could not be found";
                }
            }
        }

      }
   }
} catch (err) {
   echo "in catch block"
   echo "Caught: ${err}"
   currentBuild.result = 'FAILURE'
   throw err
}
