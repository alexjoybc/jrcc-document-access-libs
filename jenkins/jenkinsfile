try {
   timeout(time: 20, unit: 'MINUTES') {

     node {
       stage("Initialize") {
         project = env.BUILD
         // @todo: Inject via config
         // This can be nexus3 or nexus2
         env.NEXUS_VERSION = "nexus3"
         // This can be http or https
         env.NEXUS_PROTOCOL = "http"
         // Where your Nexus is running
         env.NEXUS_URL = "nexus-9wbi3f-tools.pathfinder.gov.bc.ca/nexus/content"
         // Repository where we will upload snapshots
         env.NEXUS_SNAPSHOT_REPOSITORY = "jrcc-snapshots"
         // Repository where we will upload releases
         env.NEXUS_RELEASE_REPOSITORY = "jrcc-releases"
         // Jenkins credential id to authenticate to Nexus OSS
         env.NEXUS_CREDENTIAL_ID = "nexus-credentials"
       }
     }

     node('maven') {


        stage("Checkout") {
          git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
        }

        stage("Build JARs") {
          sh "mvn clean package -Dmaven.test.skip=true"
          sh "ls"

          //stash name:"jars", includes:"target/*.jar"
        }

        stage('Push to Nexus'){
            // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
            pom = readMavenPom file: "pom.xml";
            // Find built artifact under target folder
            filesByGlob = findFiles(glob: "**/target/*.jar");

            echo "Found ${filesByGlob.length} files"
            for(file in filesByGlob){
                echo "${file.name} ${file.path} ${file.directory} ${file.length} ${file.lastModified}"
            }
            // Print some info from the artifact found
            filesByGlob.each {
                echo "${it.name} ${it.path} ${it.directory} ${it.length} ${it.lastModified}"
                // Extract the path from the File found
                artifactPath = it.path;
                // Assign to a boolean response verifying If the artifact name exists
                artifactExists = fileExists artifactPath;
                if(artifactExists) {
                    pomPath = it.path.replace("target/${it.name}", "pom.xml")
                    //propertiesPath = it.path.replace("")
                    artifactPom = readMavenPom file: pomPath;
                    echo "*** File: ${artifactPath}, group: ${artifactPom.groupId}, packaging: ${artifactPom.packaging}, version ${artifactPom.version}";
                    nexusArtifactUploader(
                        nexusVersion: NEXUS_VERSION,
                        protocol: NEXUS_PROTOCOL,
                        nexusUrl: NEXUS_URL,
                        groupId: artifactPom.groupId,
                        version: artifactPom.version,
                        repository: NEXUS_SNAPSHOT_REPOSITORY,
                        credentialsId: NEXUS_CREDENTIAL_ID,
                        artifacts: [
                            // Artifact generated such as .jar, .ear and .war files.
                            [artifactId: artifactPom.artifactId,
                            classifier: '',
                            file: artifactPath,
                            type: 'jar'],
                            // Lets upload the pom.xml file for additional information for Transitive dependencies
                            [artifactId: artifactPom.artifactId,
                            classifier: '',
                            file: "pom.xml",
                            type: "pom"]
                        ]
                    );
                } else {
                    error "*** File: ${artifactPath}, could not be found";
                }
            }
        }

      }
   }
} catch (err) {
   echo "in catch block"
   echo "Caught: ${err}"
   currentBuild.result = 'FAILURE'
   throw err
}
